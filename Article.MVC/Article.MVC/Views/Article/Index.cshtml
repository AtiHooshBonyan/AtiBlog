@model IEnumerable<Article.MVC.Models.DomainModels.ArticlePost>

@{
    ViewData["Title"] = "Article Management";
}

<div class="article-management-container">
    <!-- Dashboard Header -->
    <div class="management-header">
        <div class="header-content">
            <h1 class="page-title">
                <svg class="icon" viewBox="0 0 24 24">
                    <path fill="currentColor" d="M18,22H6A2,2 0 0,1 4,20V4A2,2 0 0,1 6,2H18A2,2 0 0,1 20,4V20A2,2 0 0,1 18,22M6,4V16H18V4H6M13,18V20H11V18H13Z" />
                </svg>
                <span>Content Management</span>
            </h1>
            <p class="page-subtitle">Manage your publication workflow</p>
        </div>
        <div class="header-actions">
            <div class="search-bar">
                <svg class="search-icon" viewBox="0 0 24 24">
                    <path fill="currentColor" d="M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z" />
                </svg>
                <input type="text" placeholder="Search articles..." class="search-input">
            </div>
            <button class="create-button" onclick="location.href='@Url.Action("Create")'">
                <svg class="icon" viewBox="0 0 24 24">
                    <path fill="currentColor" d="M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z" />
                </svg>
                <span>New Article</span>
            </button>
        </div>
    </div>

    <!-- Analytics Cards -->
    <div class="analytics-grid">
        <div class="analytics-card">
            <div class="card-icon">
                <svg viewBox="0 0 24 24">
                    <path fill="currentColor" d="M12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z" />
                </svg>
            </div>
            <div class="card-content">
                <span class="card-value">@Model.Count()</span>
                <span class="card-label">Total Articles</span>
            </div>
        </div>

        <div class="analytics-card">
            <div class="card-icon">
                <svg viewBox="0 0 24 24">
                    <path fill="currentColor" d="M19,19H5V8H19M16,1V3H8V1H6V3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3H18V1M17,12H12V17H17V12Z" />
                </svg>
            </div>
            <div class="card-content">
                <span class="card-value">@Model.Count(a => a.PublishedAt.Date == DateTime.Today)</span>
                <span class="card-label">Today's Articles</span>
            </div>
        </div>

        <div class="analytics-card">
            <div class="card-icon">
                <svg viewBox="0 0 24 24">
                    <path fill="currentColor" d="M12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4M12,6A6,6 0 0,0 6,12A6,6 0 0,0 12,18A6,6 0 0,0 18,12A6,6 0 0,0 12,6M13,12H11V7H13V12Z" />
                </svg>
            </div>
            <div class="card-content">
                <span class="card-value">@Model.Count(a => a.UpdatedAt.HasValue)</span>
                <span class="card-label">Updated</span>
            </div>
        </div>
    </div>

    <!-- Articles Table -->
    <div class="content-table-container">
        <table class="content-table">
            <thead>
                <tr>
                    <th>Article</th>
                    <th>Status</th>
                    <th>Publication Date</th>
                    <th>Last Updated</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    var isNew = item.PublishedAt > DateTime.Now.AddDays(-3);
                    var hasUpdates = item.UpdatedAt.HasValue && item.UpdatedAt > item.PublishedAt;

                    <tr>
                        <td>
                            <div class="article-preview">
                                @* @if (!string.IsNullOrEmpty(item.ImagePath))
                                {
                                    <div class="article-thumbnail" style="background-image: url('@item.ImagePath')"></div>
                                }*@
                                <div class="article-meta">
                                    <h3>@item.Title</h3>
                                </div>
                            </div>
                        </td>
                        <td>
                            <span class="status-badge @(isNew ? "new" : hasUpdates ? "updated" : "published")">
                                @(isNew ? "New" : hasUpdates ? "Updated" : "Published")
                            </span>
                        </td>
                        <td>
                            <div class="date-cell">
                                <span class="date">@item.PublishedAt.ToString()</span>
                                <span class="time">@item.PublishedAt.ToString()</span>
                            </div>
                        </td>
                        <td>
                            @if (item.UpdatedAt.HasValue)
                            {
                                <div class="date-cell">
                                    <span class="date">@item.UpdatedAt.Value.ToString()</span>
                                    <span class="time">@item.UpdatedAt.Value.ToString()</span>
                                </div>
                            }
                            else
                            {
                                <span class="empty-state">—</span>
                            }
                        </td>
                        <td>
                            <div class="action-menu">
                                <form asp-action="Details" asp-route-id="@item.Id" method="post" style="display:inline;">
                                    <button class="action-button view" title="View" onclick="location.href='@Url.Action("Details", new { id = item.Id })
'">
                                        <svg viewBox="0 0 24 24">
                                            <path fill="currentColor" d="M12,9A3,3 0 0,1 15,12A3,3 0 0,1 12,15A3,3 0 0,1 9,12A3,3 0 0,1 12,9M12,4.5C17,4.5 21.27,7.61 23,12C21.27,16.39 17,19.5 12,19.5C7,19.5 2.73,16.39 1,12C2.73,7.61 7,4.5 12,4.5M3.18,12C4.83,15.36 8.24,17.5 12,17.5C15.76,17.5 19.17,15.36 20.82,12C19.17,8.64 15.76,6.5 12,6.5C8.24,6.5 4.83,8.64 3.18,12Z" />
                                        </svg>
                                    </button>
                                </form>
                                <form asp-action="Edit" asp-route-id="@item.Id" method="post" style="display:inline;">
                                    <button class="action-button edit" title="Edit" onclick="location.href='@Url.Action("Edit", new { id = item.Id })
'">
                                        <svg viewBox="0 0 24 24">
                                            <path fill="currentColor" d="M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z" />
                                        </svg>
                                    </button>
                                </form>
                                <form asp-action="Delete" asp-route-id="@item.Id" method="post" onsubmit="return confirm('Are you sure you want to delete this article?');" style="display:inline;">
                                    <button class="action-button delete" title="Delete" onclick="location.href='@Url.Action("Delete", new { id = item.Id })
'">
                                        <svg viewBox="0 0 24 24">
                                            <path fill="currentColor" d="M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z" />
                                        </svg>

                                    </button>
                                </form>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<style>
    /* Base Styles */
    .article-management-container {
        --primary: #4361ee;
        --primary-light: #eef2ff;
        --secondary: #3f37c9;
        --accent: #4895ef;
        --dark: #1b263b;
        --light: #f8f9fa;
        --danger: #e63946;
        --success: #4cc9f0;
        --warning: #f4a261;
        --border-radius: 8px;
        --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.05);
        --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.1);
        --shadow-lg: 0 10px 15px rgba(0, 0, 0, 0.1);
        --transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        padding: 2rem;
        max-width: 1600px;
        margin: 0 auto;
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        color: #1f2937;
    }

    /* Header Styles */
    .management-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-end;
        margin-bottom: 2.5rem;
    }

    .page-title {
        font-size: 1.75rem;
        font-weight: 600;
        color: #111827;
        margin: 0 0 0.5rem 0;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

        .page-title .icon {
            width: 28px;
            height: 28px;
            color: var(--primary);
        }

    .page-subtitle {
        color: #6b7280;
        font-size: 1rem;
        margin: 0;
    }

    .header-actions {
        display: flex;
        align-items: center;
        gap: 1.25rem;
    }

    .search-bar {
        position: relative;
        width: 280px;
    }

    .search-icon {
        position: absolute;
        left: 1rem;
        top: 50%;
        transform: translateY(-50%);
        width: 18px;
        height: 18px;
        color: #9ca3af;
        pointer-events: none;
    }

    .search-input {
        width: 100%;
        padding: 0.75rem 1rem 0.75rem 2.75rem;
        border: 1px solid #e5e7eb;
        border-radius: var(--border-radius);
        background-color: white;
        font-size: 0.95rem;
        transition: var(--transition);
    }

        .search-input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.15);
        }

    .create-button {
        background-color: var(--primary);
        color: white;
        padding: 0.75rem 1.25rem;
        border-radius: var(--border-radius);
        font-weight: 500;
        font-size: 0.95rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        border: none;
        cursor: pointer;
        transition: var(--transition);
    }

        .create-button:hover {
            background-color: var(--secondary);
        }

        .create-button .icon {
            width: 18px;
            height: 18px;
        }

    /* Analytics Cards */
    .analytics-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2.5rem;
    }

    .analytics-card {
        background: white;
        border-radius: var(--border-radius);
        padding: 1.5rem;
        box-shadow: var(--shadow-sm);
        display: flex;
        align-items: center;
        gap: 1.5rem;
        transition: var(--transition);
    }

        .analytics-card:hover {
            box-shadow: var(--shadow-md);
            transform: translateY(-2px);
        }

    .card-icon {
        width: 56px;
        height: 56px;
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: var(--primary-light);
    }

        .card-icon svg {
            width: 28px;
            height: 28px;
            color: var(--primary);
        }

    .card-content {
        display: flex;
        flex-direction: column;
    }

    .card-value {
        font-size: 1.75rem;
        font-weight: 600;
        color: #111827;
        line-height: 1;
    }

    .card-label {
        color: #6b7280;
        font-size: 0.9rem;
        margin-top: 0.25rem;
    }

    /* Content Table */
    .content-table-container {
        background: white;
        border-radius: var(--border-radius);
        box-shadow: var(--shadow-sm);
        overflow: hidden;
    }

    .content-table {
        width: 100%;
        border-collapse: collapse;
    }

        .content-table th {
            background-color: #f9fafb;
            padding: 1rem 1.5rem;
            text-align: left;
            color: #6b7280;
            font-weight: 500;
            font-size: 0.85rem;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            border-bottom: 1px solid #e5e7eb;
        }

        .content-table td {
            padding: 1.25rem 1.5rem;
            border-bottom: 1px solid #f3f4f6;
            vertical-align: middle;
        }

        .content-table tr:last-child td {
            border-bottom: none;
        }

        .content-table tr:hover {
            background-color: #f9fafb;
        }

    /* Article Preview */
    .article-preview {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .article-thumbnail {
        width: 60px;
        height: 60px;
        border-radius: 6px;
        background-size: cover;
        background-position: center;
        flex-shrink: 0;
    }

    .article-meta h3 {
        font-size: 1rem;
        font-weight: 500;
        color: #111827;
        margin: 0 0 0.25rem 0;
    }

    .article-meta p {
        font-size: 0.875rem;
        color: #6b7280;
        margin: 0;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    /* Status Badges */
    .status-badge {
        display: inline-block;
        padding: 0.35rem 0.75rem;
        border-radius: 9999px;
        font-size: 0.75rem;
        font-weight: 500;
        letter-spacing: 0.05em;
    }

        .status-badge.new {
            background-color: #e0f2fe;
            color: #0369a1;
        }

        .status-badge.updated {
            background-color: #fee2e2;
            color: #b91c1c;
        }

        .status-badge.published {
            background-color: #dcfce7;
            color: #166534;
        }

    /* Date Cells */
    .date-cell {
        display: flex;
        flex-direction: column;
    }

        .date-cell .date {
            font-size: 0.95rem;
            color: #111827;
        }

        .date-cell .time {
            font-size: 0.75rem;
            color: #9ca3af;
            margin-top: 0.25rem;
        }

    .empty-state {
        color: #9ca3af;
        font-style: italic;
    }

    /* Action Menu */
    .action-menu {
        display: flex;
        gap: 0.5rem;
    }

    .action-button {
        width: 36px;
        height: 36px;
        border-radius: 6px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: none;
        border: none;
        cursor: pointer;
        transition: var(--transition);
    }

        .action-button svg {
            width: 18px;
            height: 18px;
        }

        .action-button.view {
            color: var(--primary);
        }

            .action-button.view:hover {
                background-color: #eef2ff;
            }

        .action-button.edit {
            color: var(--warning);
        }

            .action-button.edit:hover {
                background-color: #fff7ed;
            }

        .action-button.delete {
            color: var(--danger);
        }

            .action-button.delete:hover {
                background-color: #fef2f2;
            }

    /* Responsive Adjustments */
    @@media (max-width: 1024px) {
        .management-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 1.5rem;
        }

        .header-actions {
            width: 100%;
        }

        .search-bar {
            flex-grow: 1;
        }
    }

    @@media (max-width: 768px) {
        .article-management-container {
            padding: 1.5rem;
        }

        .analytics-grid {
            grid-template-columns: 1fr;
        }

        .content-table {
            display: block;
            overflow-x: auto;
            white-space: nowrap;
        }

        .article-preview {
            min-width: 250px;
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Make table rows clickable
        document.querySelectorAll('.content-table tbody tr').forEach(row => {
            row.addEventListener('click', function(e) {
                // Don't navigate if clicking on action buttons
                if (!e.target.closest('.action-menu') && !e.target.closest('button')) {
                    const viewButton = this.querySelector('.action-button.view');
                    if (viewButton) {
                        window.location.href = viewButton.dataset.href || '#';
                    }
                }
            });

            // Add hover effect
            row.style.transition = 'background-color 0.2s ease';
            row.style.cursor = 'pointer';
        });

        // Search functionality
          document.querySelector('.search-input').addEventListener('input', function () {
      const searchTerm = this.value.toLowerCase();
      const rows = document.querySelectorAll('.content-table tbody tr');

      rows.forEach(row => {
        const titleCell = row.querySelector('td:first-child h3');
        const titleText = titleCell ? titleCell.textContent.toLowerCase() : '';

        if (titleText.includes(searchTerm)) {
          row.style.display = '';
        } else {
          row.style.display = 'none';
        }
      });
    });
    });
</script>